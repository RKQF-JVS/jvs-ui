
user  nginx;
worker_processes  4;

#cat /proc/cpuinfo | grep 'physical id' | sort|uniq|wc -l  # 查看物理机有几个CPU
#cat /proc/cpuinfo | grep 'cpu cores'|uniq    # 查看cup核数
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
worker_rlimit_nofile 35535;


events {
    worker_connections  1024;
    multi_accept on;
    use epoll;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;
    types_hash_max_size 2048;
    #开启压缩
   # gzip  on;
	# Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件
	#gzip_static on;
	# 设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。
	#gzip_min_length 1k;
	# 获取多少内存用于缓存压缩结果，‘4 16k’表示以16k*4为单位获得
	#gzip_buffers 16 64K;
	# 识别http协议的版本,早期浏览器可能不支持gzip自解压,用户会看到乱码
	#gzip_http_version 1.1;
	# gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;
	#gzip_comp_level 8;
	# 对特定的MIME类型生效,其中'text/html’被系统强制启用
	# 启用应答头"Vary: Accept-Encoding"
	#gzip_vary on;
   # gzip_types text/plain application/javascript application/css  application/json text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
   # gzip_disable "MSIE [1-6]\.";

    include /etc/nginx/conf.d/*.conf;
}
